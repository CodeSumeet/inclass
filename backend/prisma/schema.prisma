generator client {
  provider = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId       String   @id @default(uuid())
  firstName    String
  lastName     String
  email        String   @unique
  passwordHash String
  students     Student[]
  teachers     Teacher[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Student {
  studentId    String       @id
  user         User         @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  classrooms   StudentClassroom[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Teacher {
  teacherId    String       @id
  user         User         @relation(fields: [teacherId], references: [userId], onDelete: Cascade)
  classrooms   Classroom[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Classroom {
  classroomId  String           @id @default(uuid())
  className    String
  description  String
  teacherId    String?          
  teacher      Teacher?         @relation(fields: [teacherId], references: [teacherId], onDelete: SetNull)
  classCode    String           @unique
  banner       String?
  students     StudentClassroom[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model StudentClassroom {
  id           Int             @id @default(autoincrement())
  studentId    String
  classroomId  String
  student      Student         @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  classroom    Classroom       @relation(fields: [classroomId], references: [classroomId], onDelete: Cascade)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@unique([studentId, classroomId])
}
